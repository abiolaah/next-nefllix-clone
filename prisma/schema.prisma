// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  image          String?
  email          String?   @unique
  emailVerified  DateTime?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  profiles       Profile[] @relation("UserProfiles")
  sessions       Session[]
  accounts       Account[]
}

model Profile {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userId        String    @db.ObjectId
  name          String
  avatar        String?   @default("https://res.cloudinary.com/dixwarqdb/image/upload/v1744696100/default-blue_oqkthi.png")
  hasPin        Boolean   @default(false)
  pin           String?
  favouritesIds String[]  @db.ObjectId
  watchedIds String[]  @db.ObjectId
  watching      Watching[]
  user          User      @relation("UserProfiles", fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model Watching {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  profileId   String   @db.ObjectId
  contentId   String   @db.ObjectId
  contentType String   // "movie" or "tvshow"
  progress    Float    // percentage watched (0-100)
  lastWatched DateTime @default(now())
  completed   Boolean  @default(false)
  season      Int?     // for TV shows
  episode     Int?     // for TV shows
  
  profile     Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  
  @@index([profileId])
  @@unique([profileId, contentId])
}

model Account {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken   String   @unique
  userId         String   @db.ObjectId
  expires        DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Movie {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String
  videoUrl     String
  thumbnailUrl String
  trailerUrl   String
  genre        String[]
  rating       Float?
  duration     String
}

model TvShow {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  description     String
  videoUrl        String
  thumbnailUrl    String
  trailerUrl      String
  genre           String[]
  rating          Float?
  numberOfSeasons Int
}